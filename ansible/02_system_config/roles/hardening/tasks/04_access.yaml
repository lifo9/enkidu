- name: 5.1.1 Ensure cron daemon is enabled and running
  ansible.builtin.service:
    name: cron
    enabled: true
    state: started

- name: 5.1.2 Ensure permissions on /etc/crontab are configured
  ansible.builtin.file:
    dest: /etc/crontab
    owner: root
    group: root
    mode: "0600"

- name: 5.1.3 Ensure permissions on /etc/cron.hourly are configured
  ansible.builtin.file:
    dest: /etc/cron.hourly
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: 5.1.4 Ensure permissions on /etc/cron.daily are configured
  ansible.builtin.file:
    dest: /etc/cron.daily
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: 5.1.5 Ensure permissions on /etc/cron.weekly are configured
  ansible.builtin.file:
    dest: /etc/cron.weekly
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: 5.1.6 Ensure permissions on /etc/cron.monthly are configured
  ansible.builtin.file:
    dest: /etc/cron.monthly
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: 5.1.7 Ensure permissions on /etc/cron.d are configured
  ansible.builtin.file:
    dest: /etc/cron.d
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: 5.1.8 Ensure cron is restricted to authorized users
  block:
    - name: 5.1.8 Ensure cron is restricted to authorized users | /etc/cron.deny
      ansible.builtin.file:
        path: /etc/cron.deny
        state: absent
    - name: 5.1.8 Ensure cron is restricted to authorized users | stat /etc/cron.allow
      ansible.builtin.stat:
        path: /etc/cron.allow
      register: cfile
    - name: 5.1.8 Ensure cron is restricted to authorized users | /etc/cron.allow
      ansible.builtin.file:
        path: /etc/cron.allow
        state: "{{ 'file' if cfile.stat.exists else 'touch' }}"
        owner: root
        group: root
        mode: "g-wx,o-rwx"

- name: 5.1.9 Ensure cron is restricted to authorized users
  block:
    - name: 5.1.9 Ensure cron is restricted to authorized users | /etc/at.deny
      ansible.builtin.file:
        path: /etc/at.deny
        state: absent
    - name: 5.1.9 Ensure cron is restricted to authorized users | stat /etc/at.allow
      ansible.builtin.stat:
        path: /etc/at.allow
      register: cfile
    - name: 5.1.9 Ensure cron is restricted to authorized users | /etc/at.allow
      ansible.builtin.file:
        path: /etc/at.allow
        state: "{{ 'file' if cfile.stat.exists else 'touch' }}"
        owner: root
        group: root
        mode: "g-wx,o-rwx"

- name: 5.2.1 Ensure permissions on /etc/ssh/sshd_config are configured
  ansible.builtin.file:
    dest: /etc/ssh/sshd_config
    state: file
    owner: root
    group: root
    mode: "0600"

- name: 5.2.2 Ensure permissions on SSH private host key files are configured
  block:
    - name: 5.2.2 Ensure permissions on SSH private host key files are configured | find keys
      ansible.builtin.shell: |
        find /etc/ssh -xdev -type f -name 'ssh_host_*_key'  && true || true
      register: private_keys
      changed_when: false
    - name: 5.2.2 Ensure permissions on SSH private host key files are configured | fix permissions
      ansible.builtin.file:
        dest: "{{ item }}"
        state: file
        owner: root
        group: root
        mode: "0600"
      loop: "{{ private_keys.stdout_lines }}"
      when: private_keys.stdout_lines | length > 0

- name: 5.2.3 Ensure permissions on SSH public host key files are configured
  block:
    - name: 5.2.3 Ensure permissions on SSH public host key files are configured | find keys
      ansible.builtin.shell: |
        find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' && true || true
      register: public_keys
      changed_when: false
    - name: 5.2.3 Ensure permissions on SSH public host key files are configured | fix permissions
      ansible.builtin.file:
        dest: "{{ item }}"
        state: file
        owner: root
        group: root
        mode: "go-wx"
      loop: "{{ public_keys.stdout_lines }}"
      when: public_keys.stdout_lines | length > 0

- name: 5.2.4 Ensure SSH access is limited
  block:
    - name: 5.2.4 Ensure SSH access is limited | Create ssh_allowed_group group
      ansible.builtin.group:
        name: "{{ ssh_allowed_group }}"
        state: present
    - name: 5.2.4 Ensure SSH access is limited | /etc/ssh/sshd_config
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^AllowGroups"
        line: "AllowGroups {{ ssh_allowed_group }}"
      notify: Reload sshd

- name: 5.2.5 Ensure SSH LogLevel is appropriate
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^LogLevel"
    line: "LogLevel INFO"

- name: 5.2.6 Ensure SSH PAM is enabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^UsePAM"
    line: "UsePAM yes"

- name: 5.2.7 Ensure SSH root login is disabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin .*"
    line: "PermitRootLogin no"

- name: 5.2.8 Ensure SSH HostbasedAuthentication is disabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^HostbasedAuthentication"
    line: "HostbasedAuthentication no"

- name: 5.2.9 Ensure SSH PermitEmptyPasswords is disabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^PermitEmptyPasswords"
    line: "PermitEmptyPasswords no"

- name: 5.2.10 Ensure SSH PermitUserEnvironment is disabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^PermitUserEnvironment"
    line: "PermitUserEnvironment no"

- name: 5.2.11 Ensure SSH IgnoreRhosts is enabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^IgnoreRhosts"
    line: "IgnoreRhosts yes"

- name: 5.2.12 Ensure SSH X11 forwarding is disabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^X11Forwarding"
    line: "X11Forwarding no"

- name: 5.2.13 Ensure only strong Ciphers are used
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^Ciphers"
    line: "Ciphers {{ ssh_ciphers }}"

- name: 5.2.14 Ensure only strong MAC algorithms are used
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^MACs"
    line: "MACs {{ ssh_macs }}"

- name: 5.2.15 Ensure only strong Key Exchange algorithms are used
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^KexAlgorithms"
    line: "KexAlgorithms {{ ssh_key_algorithms }}"

- name: 5.2.16 Ensure SSH AllowTcpForwarding is disabled
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^AllowTcpForwarding"
    line: "AllowTcpForwarding no"

- name: 5.2.18 Ensure SSH MaxAuthTries is set to 4 or less
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?MaxAuthTries \d'
    line: "MaxAuthTries {{ ssh_max_auth_tries }}"

- name: "5.2.19 Ensure SSH MaxStartups is configured to {{ ssh_max_startups }}"
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^MaxStartups"
    line: "MaxStartups {{ ssh_max_startups }}"

- name: "5.2.20 Ensure SSH MaxSessions is limited to {{ ssh_max_sessions }}"
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^MaxSessions"
    line: "MaxSessions {{ ssh_max_sessions }}"

- name: 5.2.21 Ensure SSH LoginGraceTime is set to one minute or less
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^LoginGraceTime"
    line: "LoginGraceTime 60"

- name: 5.2.22 Ensure SSH Idle Timeout Interval is configured
  block:
    - name: 5.2.22 Ensure SSH Idle Timeout Interval is configured | clientalive
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^ClientAliveInterval"
        line: "ClientAliveInterval 600"
    - name: 5.2.22 Ensure SSH Idle Timeout Interval is configured | MaxAlive
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^ClientAliveCountMax"
        line: "ClientAliveCountMax 0"

- name: "5.2.X Restart sshd"
  ansible.builtin.service:
    name: sshd
    state: restarted

- name: 5.3.1 Ensure sudo is installed
  ansible.builtin.apt:
    name: sudo
    state: present
    install_recommends: false

- name: 5.3.2 Ensure sudo commands use pty
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^Defaults use_pty"
    line: "Defaults use_pty"
    validate: "visudo -cf %s"

- name: 5.3.3 Ensure sudo log file exists
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^Defaults logfile.*"
    line: 'Defaults logfile="/var/log/sudo.log"'
    validate: "visudo -cf %s"

- name: 5.3.7 Ensure access to the su command is restricted
  block:
    - name: 5.3.7 Ensure access to the su command is restricted  | create su-group-access
      ansible.builtin.template:
        src: templates/su-group-access.j2
        dest: "/etc/security/su-group-access"
        owner: root
        group: root
        mode: "0644"
    - name: 5.3.7 Ensure access to the su command is restricted  | create pam-d-su
      ansible.builtin.template:
        src: templates/pam-d-su.j2
        dest: "/etc/pam.d/su"
        owner: root
        group: root
        mode: "0644"

- name: 5.4.1 Ensure password creation requirements are configured
  block:
    - name: 5.4.1 Ensure password creation requirements are configured
      ansible.builtin.apt:
        name:
          - libpam-pwquality
          - cracklib-runtime
        state: present
        install_recommends: false
    - name: 5.4.1 Ensure password creation requirements are configured
      ansible.builtin.lineinfile:
        state: present
        create: true
        dest: /etc/security/pwquality.conf
        owner: root
        group: root
        mode: "0644"
        regexp: "^{{ item.key }}"
        line: "{{ item.key }} = {{ item.value }}"
      loop:
        - { key: "minlen", value: "14" }
        - { key: "dcredit", value: "-1" }
        - { key: "ucredit", value: "-1" }
        - { key: "ocredit", value: "-1" }
        - { key: "lcredit", value: "-1" }

- name: 5.4.3.1 Ensure password reuse is limited | delete possible duplicate lines
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/common-password
    regexp: '^password.*pam_pwhistory\.so.*remember.*'
    state: absent

- name: 5.4.3.2 Ensure password reuse is limited | update file according to CIS
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/common-password
    line: "password required pam_pwhistory.so remember=5"
    insertafter: '^password\s+?requisite.*'
    state: present
    firstmatch: true

- name: 5.4.4 Ensure password hashing algorithm is SHA-512
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/common-password
    regexp: '^password\s+\[success(.*)(md5|blowfish|bigcrypt|sha256|sha512)(.*)$'
    line: 'password [success\1 sha512 \3'
    backrefs: true

- name: 5.5.2 Ensure system accounts are secured
  ansible.builtin.shell: |
    for user in `awk -F: '($3 < 1000) {print $1 }' /etc/passwd`; do
      usermod -L $user
      if [ $user != "sync" ] && [ $user != "shutdown" ] && [ $user != "halt" ];
      then
        usermod -s /usr/sbin/nologin $user
      fi
    done
  changed_when: false

- name: 5.5.3 Ensure default group for the root account is GID 0
  ansible.builtin.command: usermod -g 0 root
  changed_when: false

- name: 5.5.4 Ensure default user umask is 027 or more restrictive
  block:
    - name: 5.5.4 Ensure default user umask is 027 or more restrictive | /etc/login.defs
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/login.defs
        regexp: '^UMASK\s'
        line: "UMASK 027"
        mode: "0666"
    - name: 5.5.4 Ensure default user umask is 027 or more restrictive  | /etc/pam.d/common-session
      ansible.builtin.lineinfile:
        dest: /etc/pam.d/common-session
        regexp: '^session optional\s+pam_umask.so'
        line: "session optional pam_umask.so"
    - name: 5.5.4 Ensure default user umask is 027 or more restrictive - /etc/profile
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/profile
        owner: root
        group: root
        mode: "0644"
        create: true
        regexp: "^umask "
        line: "umask 027"
