- name: Obsidian LiveSync
  hosts: server
  vars_files:
    - vars/main.yaml
  tasks:
    - name: Create obsidian-livesync user
      become: true
      ansible.builtin.user:
        name: obsidian-livesync
        state: present
        shell: /usr/sbin/nologin
        system: false
        create_home: false

    - name: Get uid and gid of user
      ansible.builtin.command: id -u obsidian-livesync
      register: obsidian_livesync_uid
      changed_when: false

    - name: Get gid of user
      ansible.builtin.command: id -g obsidian-livesync
      register: obsidian_livesync_gid
      changed_when: false

    - name: Create obsidian-livesync k8s namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: obsidian-livesync
        namespace: obsidian-livesync
        state: present

    - name: Create obsidian-livesync directory
      become: true
      ansible.builtin.file:
        path: "{{ kube_app_data }}/obsidian_livesync"
        state: directory
        owner: obsidian-livesync
        group: obsidian-livesync
        mode: "0700"

    - name: Create temporary build directory
      register: build_dir
      ansible.builtin.tempfile:
        state: directory
        suffix: obsidian-livesync

    - name: Copy helm chart to target
      ansible.builtin.copy:
        src: chart/
        dest: "{{ build_dir.path }}"
        mode: "0700"

    - name: Create values.yaml from template
      ansible.builtin.template:
        src: chart/values.yaml
        dest: "{{ build_dir.path }}/values.yaml"
        mode: "0600"

    - name: Install obsidian-livesync helm chart
      kubernetes.core.helm:
        chart_ref: "{{ build_dir.path }}"
        name: "obsidian-livesync"
        namespace: "obsidian-livesync"
        state: present

    - name: Cleanup
      ansible.builtin.file:
        state: absent
        path: "{{ build_dir.path }}"

    - name: Create obsidian-livesync web uptime-push cronjob
      become: true
      ansible.builtin.cron:
        name: "obsidian-livesync uptime-push"
        user: "uptimepush"
        minute: "*"
        job: '/usr/local/bin/uptime-push "https://{{ domain }}/_up" "ok" "{{ uptime_endpoint }}" "{{ couchdb_user }}:{{ couchdb_password }}"'
