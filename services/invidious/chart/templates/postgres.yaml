---
apiVersion: "apps/v1"
kind: Deployment
metadata:
  name: {{ .Values.name }}-postgres
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}-postgres
  template:
    metadata:
      labels:
        app: {{ .Values.name }}-postgres
    spec:
      serviceAccountName: {{ .Values.name }}
      {{- with .Values.securityContext }}
      securityContext:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        imagePullPolicy: IfNotPresent
        name: {{ .Values.name }}-postgres
        envFrom:
        - configMapRef:
            name: {{ .Values.name }}-postgres
        - secretRef:
            name: {{ .Values.name }}-postgres
        env:
        - name: PGDATA
          value: /data/postgres
        ports:
        - name: postgres
          containerPort: 5432
        livenessProbe:
          exec:
            command: ["/bin/sh", "-c", "exec", "pg_isready -U {{ .Values.env.postgres.POSTGRES_USER }} -h 127.0.0.1 -p 5432"]
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: data
        persistentVolumeClaim:
         claimName: {{ .Values.name }}
